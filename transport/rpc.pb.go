// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package transport is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	RpcRequest
	RpcResponse
*/
package transport

import proto "github.com/golang/protobuf/proto"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type MethodType int32

const (
	MethodType_test  MethodType = 0
	MethodType_hello MethodType = 1
)

var MethodType_name = map[int32]string{
	0: "test",
	1: "hello",
}
var MethodType_value = map[string]int32{
	"test":  0,
	"hello": 1,
}

func (x MethodType) Enum() *MethodType {
	p := new(MethodType)
	*p = x
	return p
}
func (x MethodType) String() string {
	return proto.EnumName(MethodType_name, int32(x))
}
func (x *MethodType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MethodType_value, data, "MethodType")
	if err != nil {
		return err
	}
	*x = MethodType(value)
	return nil
}

type RpcRequest struct {
	Method           *MethodType `protobuf:"varint,1,req,name=method,enum=transport.MethodType" json:"method,omitempty"`
	Params           []byte      `protobuf:"bytes,2,req,name=params" json:"params,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *RpcRequest) Reset()         { *m = RpcRequest{} }
func (m *RpcRequest) String() string { return proto.CompactTextString(m) }
func (*RpcRequest) ProtoMessage()    {}

func (m *RpcRequest) GetMethod() MethodType {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return MethodType_test
}

func (m *RpcRequest) GetParams() []byte {
	if m != nil {
		return m.Params
	}
	return nil
}

type RpcResponse struct {
	Code             *uint32 `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Body             []byte  `protobuf:"bytes,2,req,name=body" json:"body,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RpcResponse) Reset()         { *m = RpcResponse{} }
func (m *RpcResponse) String() string { return proto.CompactTextString(m) }
func (*RpcResponse) ProtoMessage()    {}

func (m *RpcResponse) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *RpcResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterEnum("transport.MethodType", MethodType_name, MethodType_value)
}

// Client API for RpcHandler service

type RpcHandlerClient interface {
	Invoke(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
}

type rpcHandlerClient struct {
	cc *grpc.ClientConn
}

func NewRpcHandlerClient(cc *grpc.ClientConn) RpcHandlerClient {
	return &rpcHandlerClient{cc}
}

func (c *rpcHandlerClient) Invoke(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := grpc.Invoke(ctx, "/transport.RpcHandler/Invoke", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcHandler service

type RpcHandlerServer interface {
	Invoke(context.Context, *RpcRequest) (*RpcResponse, error)
}

func RegisterRpcHandlerServer(s *grpc.Server, srv RpcHandlerServer) {
	s.RegisterService(&_RpcHandler_serviceDesc, srv)
}

func _RpcHandler_Invoke_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RpcRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RpcHandlerServer).Invoke(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RpcHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transport.RpcHandler",
	HandlerType: (*RpcHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _RpcHandler_Invoke_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
